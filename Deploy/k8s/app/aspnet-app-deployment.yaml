# ASP.NET Core 9 Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aspnet-app
  namespace: production
  labels:
    app: aspnet-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aspnet-app
  template:
    metadata:
      labels:
        app: aspnet-app
    spec:
      containers:
      - name: aspnet-app
        image: registry.gitlab.com/bunlongchea/ecommerce-dotnet:latest # Update with your registry
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: ASPNETCORE_ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: aspnet-config
              key: ASPNETCORE_ENVIRONMENT
        - name: ASPNETCORE_URLS
          valueFrom:
            configMapKeyRef:
              name: aspnet-config
              key: ASPNETCORE_URLS
        - name: ConnectionStrings__DefaultConnection
          valueFrom:
            secretKeyRef:
              name: aspnet-secrets
              key: ConnectionStrings__DefaultConnection
        - name: Jwt__Key
          valueFrom:
            secretKeyRef:
              name: aspnet-secrets
              key: Jwt__Key
        - name: Jwt__Issuer
          valueFrom:
            configMapKeyRef:
              name: aspnet-config
              key: Jwt__Issuer
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
# ASP.NET Service
apiVersion: v1
kind: Service
metadata:
  name: aspnet-service
  namespace: production
  labels:
    app: aspnet-app
spec:
  type: ClusterIP
  selector:
    app: aspnet-app
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http

---
# ASP.NET ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: aspnet-config
  namespace: production
data:
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://+:8080"
  Jwt__Issuer: "https://ecommerceapi.bunlong.site"

---
# ASP.NET Secrets
apiVersion: v1
kind: Secret
metadata:
  name: aspnet-secrets
  namespace: production
type: Opaque
data:
  ConnectionStrings__DefaultConnection: U2VydmVyPW1zc3FsLXNlcnZpY2UsMTQzMztEYXRhYmFzZT1FY29tbWVyY2U7VXNlciBJZD1zYTtQYXNzd29yZD1Zb3VyU3Ryb25nQFBhc3N3b3JkMTIzITtUcnVzdFNlcnZlckNlcnRpZmljYXRlPVRydWU7
  # Base64 encoded: Server=mssql-service,1433;Database=Ecommerce;User Id=sa;Password=YourStrong@Password123!;TrustServerCertificate=True;
  Jwt__Key: TFBCSGNVa1NPeTdiMWpsT3k5YSt2TU5qWW1ERU1KbUFaQ2tvU0krMVZCbz0=

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aspnet-ingress
  namespace: production
  annotations:
    # Use NGINX Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ingress.class: "nginx"
    
    # Cloudflare specific annotations
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    
    # Enable real IP forwarding from Cloudflare
    nginx.ingress.kubernetes.io/enable-real-ip: "true"
    nginx.ingress.kubernetes.io/real-ip-header: "X-Forwarded-For"
    nginx.ingress.kubernetes.io/real-ip-recursive: "true"
    
    # CORS headers for Swagger and API
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://ecommerceapi.bunlong.site,https://www.ecommerceapi.bunlong.site,https://ecommercevue.bunlong.site,https://www.ecommercevue.bunlong.site"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS, PATCH"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Keep-Alive,Cache-Control,Content-Type,Range,Authorization,Accept,Origin,X-Forwarded-For,X-Forwarded-Proto,x-signalr-user-agent,x-requested-with,x-ms-request-id,connection,upgrade"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-max-age: "86400"
    
    # SSL and security
    nginx.ingress.kubernetes.io/ssl-redirect: "false"  # Let Cloudflare handle HTTPS redirect
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"  # Let Cloudflare handle HTTPS redirect

    # WebSocket and SignalR specific configuration
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$arg_id"
    
    # Enhanced configuration for SignalR and CORS
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Cloudflare forwarding headers
      more_set_headers "X-Forwarded-Proto: https";
      more_set_headers "X-Forwarded-Port: 443";
      
      # Enhanced CORS headers for SignalR
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' 'https://ecommercevue.bunlong.site' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-SignalR-User-Agent,Connection,Upgrade' always;
        add_header 'Access-Control-Max-Age' 86400 always;
        add_header 'Content-Type' 'text/plain; charset=utf-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
      }
      
      # CSP header to allow WebSocket connections
      more_set_headers "Content-Security-Policy: default-src 'self' http: https: data: blob: 'unsafe-inline'; connect-src 'self' ws: wss: http: https: *.bunlong.site; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data: https:";

    # Server snippet for WebSocket handling
    nginx.ingress.kubernetes.io/server-snippet: |
      # WebSocket connection upgrade handling
      map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
      }
      
      # Specific location for SignalR hub
      location /chathub {
        proxy_pass http://upstream_balancer;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        
        # CORS headers for SignalR negotiate endpoint
        add_header 'Access-Control-Allow-Origin' 'https://ecommercevue.bunlong.site' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
      }
    
    # # Add custom headers to pass Cloudflare info to application
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   more_set_headers "X-Forwarded-Proto: https";
    #   more_set_headers "X-Forwarded-Port: 443";
spec:
  rules:
  - host: ecommerceapi.bunlong.site
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aspnet-service
            port:
              number: 80
  - host: www.ecommerceapi.bunlong.site
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aspnet-service
            port:
              number: 80